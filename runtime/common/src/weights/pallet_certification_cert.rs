
//! Autogenerated weights for `pallet_certification`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-22, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bgallois-ms7d43`, CPU: `12th Gen Intel(R) Core(TM) i3-12100F`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/duniter
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output=runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_certification`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_certification::WeightInfo for WeightInfo<T> {
	/// Storage: Identity Identities (r:2 w:0)
	/// Proof Skipped: Identity Identities (max_values: None, max_size: None, mode: Measured)
	/// Storage: Cert StorageIdtyCertMeta (r:2 w:2)
	/// Proof Skipped: Cert StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Cert StorageCertsRemovableOn (r:1 w:1)
	/// Proof Skipped: Cert StorageCertsRemovableOn (max_values: None, max_size: None, mode: Measured)
	/// Storage: Cert CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Cert CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	fn add_cert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `839`
		//  Estimated: `6779`
		// Minimum execution time: 18_790_000 picoseconds.
		Weight::from_parts(19_591_000, 0)
			.saturating_add(Weight::from_parts(0, 6779))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Cert CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Cert CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	/// Storage: Cert StorageIdtyCertMeta (r:2 w:2)
	/// Proof Skipped: Cert StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1 w:0)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	fn del_cert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `722`
		//  Estimated: `6662`
		// Minimum execution time: 16_351_000 picoseconds.
		Weight::from_parts(16_970_000, 0)
			.saturating_add(Weight::from_parts(0, 6662))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Cert CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Cert CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	/// Storage: Cert StorageIdtyCertMeta (r:1000 w:1000)
	/// Proof Skipped: Cert StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1 w:0)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[2, 1000]`.
	/// The range of component `i` is `[2, 1000]`.
	fn remove_all_certs_received_by(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `608 + i * (35 ±0)`
		//  Estimated: `4079 + i * (2511 ±0)`
		// Minimum execution time: 17_062_000 picoseconds.
		Weight::from_parts(17_453_000, 0)
			.saturating_add(Weight::from_parts(0, 4079))
			// Standard Error: 8_545
			.saturating_add(Weight::from_parts(4_805_246, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(i.into()))
	}
	/// Storage: Cert StorageCertsRemovableOn (r:1 w:0)
	/// Proof Skipped: Cert StorageCertsRemovableOn (max_values: None, max_size: None, mode: Measured)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `181`
		//  Estimated: `3646`
		// Minimum execution time: 2_906_000 picoseconds.
		Weight::from_parts(3_119_000, 0)
			.saturating_add(Weight::from_parts(0, 3646))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: Cert CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Cert CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	fn do_remove_cert_noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `279`
		//  Estimated: `3744`
		// Minimum execution time: 3_649_000 picoseconds.
		Weight::from_parts(3_853_000, 0)
			.saturating_add(Weight::from_parts(0, 3744))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Cert CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Cert CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	/// Storage: Cert StorageIdtyCertMeta (r:2 w:2)
	/// Proof Skipped: Cert StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1 w:0)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	fn do_remove_cert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `722`
		//  Estimated: `6662`
		// Minimum execution time: 14_838_000 picoseconds.
		Weight::from_parts(15_366_000, 0)
			.saturating_add(Weight::from_parts(0, 6662))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
