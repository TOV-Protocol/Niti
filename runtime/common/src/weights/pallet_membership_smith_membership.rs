// Copyright 2021-2022 Axiom-Team
//
// This file is part of Duniter-v2S.
//
// Duniter-v2S is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// Duniter-v2S is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Duniter-v2S. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_membership`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-08, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benjamin-xps139380`, CPU: `Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gdev-benchmark"), DB CACHE: 1024

// Executed Command:
// target/release/duniter
// benchmark
// pallet
// --chain=gdev-benchmark
// --steps=5
// --repeat=2
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./file_header.txt
// --output=./runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_membership`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_membership::WeightInfo for WeightInfo<T> {
	/// Storage: Identity IdentityIndexOf (r:1 w:0)
	/// Proof Skipped: Identity IdentityIndexOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity Identities (r:1 w:0)
	/// Proof Skipped: Identity Identities (max_values: None, max_size: None, mode: Measured)
	fn request_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `365`
		//  Estimated: `3830`
		// Minimum execution time: 40_411_000 picoseconds.
		Weight::from_parts(42_517_000, 0)
			.saturating_add(Weight::from_parts(0, 3830))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: Identity IdentityIndexOf (r:2 w:0)
	/// Proof Skipped: Identity IdentityIndexOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: SmithMembership PendingMembership (r:1 w:1)
	/// Proof Skipped: SmithMembership PendingMembership (max_values: None, max_size: None, mode: Measured)
	/// Storage: SmithCert StorageIdtyCertMeta (r:1 w:0)
	/// Proof Skipped: SmithCert StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: SmithMembership Membership (r:2 w:1)
	/// Proof Skipped: SmithMembership Membership (max_values: None, max_size: None, mode: Measured)
	/// Storage: SmithMembership CounterForMembership (r:1 w:1)
	/// Proof: SmithMembership CounterForMembership (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: SmithMembership MembershipsExpireOn (r:1 w:1)
	/// Proof Skipped: SmithMembership MembershipsExpireOn (max_values: None, max_size: None, mode: Measured)
	fn claim_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `827`
		//  Estimated: `6767`
		// Minimum execution time: 142_215_000 picoseconds.
		Weight::from_parts(152_753_000, 0)
			.saturating_add(Weight::from_parts(0, 6767))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Identity IdentityIndexOf (r:1 w:0)
	/// Proof Skipped: Identity IdentityIndexOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: SmithMembership Membership (r:1 w:1)
	/// Proof Skipped: SmithMembership Membership (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity Identities (r:1 w:0)
	/// Proof Skipped: Identity Identities (max_values: None, max_size: None, mode: Measured)
	/// Storage: SmithMembership MembershipsExpireOn (r:2 w:2)
	/// Proof Skipped: SmithMembership MembershipsExpireOn (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	fn renew_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `645`
		//  Estimated: `6585`
		// Minimum execution time: 110_054_000 picoseconds.
		Weight::from_parts(112_760_000, 0)
			.saturating_add(Weight::from_parts(0, 6585))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Identity IdentityIndexOf (r:1 w:0)
	/// Proof Skipped: Identity IdentityIndexOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: SmithMembership Membership (r:1 w:1)
	/// Proof Skipped: SmithMembership Membership (max_values: None, max_size: None, mode: Measured)
	/// Storage: SmithMembership CounterForMembership (r:1 w:1)
	/// Proof: SmithMembership CounterForMembership (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: SmithMembership MembershipsExpireOn (r:1 w:1)
	/// Proof Skipped: SmithMembership MembershipsExpireOn (max_values: None, max_size: None, mode: Measured)
	/// Storage: AuthorityMembers Members (r:1 w:1)
	/// Proof Skipped: AuthorityMembers Members (max_values: None, max_size: None, mode: Measured)
	/// Storage: AuthorityMembers OnlineAuthorities (r:1 w:1)
	/// Proof Skipped: AuthorityMembers OnlineAuthorities (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AuthorityMembers AuthoritiesCounter (r:1 w:1)
	/// Proof Skipped: AuthorityMembers AuthoritiesCounter (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AuthorityMembers IncomingAuthorities (r:1 w:1)
	/// Proof Skipped: AuthorityMembers IncomingAuthorities (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session NextKeys (r:1 w:1)
	/// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	/// Storage: Session KeyOwner (r:0 w:4)
	/// Proof Skipped: Session KeyOwner (max_values: None, max_size: None, mode: Measured)
	fn revoke_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1164`
		//  Estimated: `4629`
		// Minimum execution time: 224_136_000 picoseconds.
		Weight::from_parts(238_140_000, 0)
			.saturating_add(Weight::from_parts(0, 4629))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(13))
	}
}
