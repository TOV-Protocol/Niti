// Copyright 2021-2022 Axiom-Team
//
// This file is part of Duniter-v2S.
//
// Duniter-v2S is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// Duniter-v2S is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Duniter-v2S. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_membership`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-14, STEPS: `8`, REPEAT: `4`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `squirrel`, CPU: `Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/duniter
// benchmark
// pallet
// --chain=dev
// --steps=8
// --repeat=4
// --pallet=pallet-membership
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./file_header.txt
// --output=./runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_membership`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_membership::WeightInfo for WeightInfo<T> {
	/// Storage: Identity IdentityIndexOf (r:1 w:0)
	/// Proof Skipped: Identity IdentityIndexOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Cert StorageIdtyCertMeta (r:1 w:0)
	/// Proof Skipped: Cert StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Distance IdentityDistanceStatus (r:1 w:0)
	/// Proof Skipped: Distance IdentityDistanceStatus (max_values: None, max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1 w:1)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	/// Storage: Membership CounterForMembership (r:1 w:1)
	/// Proof: Membership CounterForMembership (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Membership MembershipsExpireOn (r:1 w:1)
	/// Proof Skipped: Membership MembershipsExpireOn (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity Identities (r:1 w:1)
	/// Proof Skipped: Identity Identities (max_values: None, max_size: None, mode: Measured)
	/// Storage: UniversalDividend CurrentUdIndex (r:1 w:0)
	/// Proof: UniversalDividend CurrentUdIndex (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: Identity IdentityChangeSchedule (r:1 w:0)
	/// Proof Skipped: Identity IdentityChangeSchedule (max_values: None, max_size: None, mode: Measured)
	fn claim_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1272`
		//  Estimated: `4737`
		// Minimum execution time: 1_213_348_000 picoseconds.
		Weight::from_parts(1_439_442_000, 0)
			.saturating_add(Weight::from_parts(0, 4737))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Identity IdentityIndexOf (r:1 w:0)
	/// Proof Skipped: Identity IdentityIndexOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1 w:1)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity Identities (r:1 w:0)
	/// Proof Skipped: Identity Identities (max_values: None, max_size: None, mode: Measured)
	/// Storage: Distance IdentityDistanceStatus (r:1 w:0)
	/// Proof Skipped: Distance IdentityDistanceStatus (max_values: None, max_size: None, mode: Measured)
	/// Storage: Membership MembershipsExpireOn (r:2 w:2)
	/// Proof Skipped: Membership MembershipsExpireOn (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	fn renew_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `988`
		//  Estimated: `6928`
		// Minimum execution time: 714_537_000 picoseconds.
		Weight::from_parts(862_085_000, 0)
			.saturating_add(Weight::from_parts(0, 6928))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Identity IdentityIndexOf (r:1 w:0)
	/// Proof Skipped: Identity IdentityIndexOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1 w:1)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	/// Storage: Membership CounterForMembership (r:1 w:1)
	/// Proof: Membership CounterForMembership (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Membership MembershipsExpireOn (r:1 w:1)
	/// Proof Skipped: Membership MembershipsExpireOn (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity Identities (r:1 w:1)
	/// Proof Skipped: Identity Identities (max_values: None, max_size: None, mode: Measured)
	/// Storage: UniversalDividend CurrentUdIndex (r:1 w:0)
	/// Proof: UniversalDividend CurrentUdIndex (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: Identity IdentityChangeSchedule (r:2 w:1)
	/// Proof Skipped: Identity IdentityChangeSchedule (max_values: None, max_size: None, mode: Measured)
	fn revoke_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `703`
		//  Estimated: `6643`
		// Minimum execution time: 847_926_000 picoseconds.
		Weight::from_parts(1_282_028_000, 0)
			.saturating_add(Weight::from_parts(0, 6643))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_012_000 picoseconds.
		Weight::from_parts(4_629_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: Membership MembershipsExpireOn (r:1 w:1)
	/// Proof Skipped: Membership MembershipsExpireOn (max_values: None, max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1024 w:1024)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	/// Storage: Membership CounterForMembership (r:1 w:1)
	/// Proof: Membership CounterForMembership (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Identity Identities (r:1024 w:4)
	/// Proof Skipped: Identity Identities (max_values: None, max_size: None, mode: Measured)
	/// Storage: UniversalDividend CurrentUdIndex (r:1 w:0)
	/// Proof: UniversalDividend CurrentUdIndex (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: Identity IdentityChangeSchedule (r:2 w:1)
	/// Proof Skipped: Identity IdentityChangeSchedule (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1024]`.
	/// The range of component `i` is `[0, 1024]`.
	fn expire_memberships(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `567 + i * (23 ±0)`
		//  Estimated: `6583 + i * (2499 ±0)`
		// Minimum execution time: 86_925_000 picoseconds.
		Weight::from_parts(89_056_000, 0)
			.saturating_add(Weight::from_parts(0, 6583))
			// Standard Error: 2_429_589
			.saturating_add(Weight::from_parts(295_368_241, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 2499).saturating_mul(i.into()))
	}
}
