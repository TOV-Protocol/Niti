// Copyright 2021-2022 Axiom-Team
//
// This file is part of Duniter-v2S.
//
// Duniter-v2S is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// Duniter-v2S is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Duniter-v2S. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-08, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benjamin-xps139380`, CPU: `Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gdev-benchmark"), DB CACHE: 1024

// Executed Command:
// target/release/duniter
// benchmark
// pallet
// --chain=gdev-benchmark
// --steps=5
// --repeat=2
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./file_header.txt
// --output=./runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 23_579_000 picoseconds.
		Weight::from_parts(26_428_100, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 601
			.saturating_add(Weight::from_parts(1_858, 0).saturating_mul(z.into()))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(457), added: 2932, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 10]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174 + s * (4 ±0)`
		//  Estimated: `3922`
		// Minimum execution time: 118_427_000 picoseconds.
		Weight::from_parts(123_956_792, 0)
			.saturating_add(Weight::from_parts(0, 3922))
			// Standard Error: 1_009_038
			.saturating_add(Weight::from_parts(1_014_396, 0).saturating_mul(s.into()))
			// Standard Error: 807
			.saturating_add(Weight::from_parts(1_494, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(457), added: 2932, mode: MaxEncodedLen)
	/// The range of component `s` is `[3, 10]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240`
		//  Estimated: `3922`
		// Minimum execution time: 73_115_000 picoseconds.
		Weight::from_parts(75_846_342, 0)
			.saturating_add(Weight::from_parts(0, 3922))
			// Standard Error: 1_803_422
			.saturating_add(Weight::from_parts(2_178_989, 0).saturating_mul(s.into()))
			// Standard Error: 1_337
			.saturating_add(Weight::from_parts(1_473, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(457), added: 2932, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 10]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(_s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `308 + s * (36 ±0)`
		//  Estimated: `3922`
		// Minimum execution time: 119_094_000 picoseconds.
		Weight::from_parts(110_581_521, 0)
			.saturating_add(Weight::from_parts(0, 3922))
			// Standard Error: 4_969
			.saturating_add(Weight::from_parts(12_145, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(457), added: 2932, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 10]`.
	fn approve_as_multi_create(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + s * (5 ±0)`
		//  Estimated: `3922`
		// Minimum execution time: 101_653_000 picoseconds.
		Weight::from_parts(105_756_350, 0)
			.saturating_add(Weight::from_parts(0, 3922))
			// Standard Error: 530_883
			.saturating_add(Weight::from_parts(257_575, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(457), added: 2932, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 10]`.
	fn approve_as_multi_approve(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240`
		//  Estimated: `3922`
		// Minimum execution time: 64_210_000 picoseconds.
		Weight::from_parts(54_945_550, 0)
			.saturating_add(Weight::from_parts(0, 3922))
			// Standard Error: 1_658_456
			.saturating_add(Weight::from_parts(3_219_925, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(457), added: 2932, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 10]`.
	fn cancel_as_multi(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369 + s * (5 ±0)`
		//  Estimated: `3922`
		// Minimum execution time: 105_930_000 picoseconds.
		Weight::from_parts(166_384_900, 0)
			.saturating_add(Weight::from_parts(0, 3922))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
