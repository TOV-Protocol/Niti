// Copyright 2021-2022 Axiom-Team
//
// This file is part of Duniter-v2S.
//
// Duniter-v2S is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// Duniter-v2S is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Duniter-v2S. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_certification`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bgallois-ms7d43`, CPU: `12th Gen Intel(R) Core(TM) i3-12100F`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/duniter
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./file_header.txt
// --output=./runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_certification`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_certification::WeightInfo for WeightInfo<T> {
	/// Storage: Identity Identities (r:2 w:0)
	/// Proof Skipped: Identity Identities (max_values: None, max_size: None, mode: Measured)
	/// Storage: Cert StorageIdtyCertMeta (r:2 w:2)
	/// Proof Skipped: Cert StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Cert CertsRemovableOn (r:1 w:1)
	/// Proof Skipped: Cert CertsRemovableOn (max_values: None, max_size: None, mode: Measured)
	/// Storage: Cert CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Cert CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	fn add_cert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `818`
		//  Estimated: `6758`
		// Minimum execution time: 31_981_000 picoseconds.
		Weight::from_parts(32_790_000, 0)
			.saturating_add(Weight::from_parts(0, 6758))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Cert CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Cert CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	/// Storage: Cert StorageIdtyCertMeta (r:2 w:2)
	/// Proof Skipped: Cert StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1 w:0)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	fn del_cert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `701`
		//  Estimated: `6641`
		// Minimum execution time: 24_063_000 picoseconds.
		Weight::from_parts(25_566_000, 0)
			.saturating_add(Weight::from_parts(0, 6641))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Cert CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Cert CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	/// Storage: Cert StorageIdtyCertMeta (r:1000 w:1000)
	/// Proof Skipped: Cert StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1 w:0)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[2, 1000]`.
	fn remove_all_certs_received_by(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `587 + i * (35 ±0)`
		//  Estimated: `4058 + i * (2511 ±0)`
		// Minimum execution time: 25_001_000 picoseconds.
		Weight::from_parts(26_485_000, 0)
			.saturating_add(Weight::from_parts(0, 4058))
			// Standard Error: 40_688
			.saturating_add(Weight::from_parts(10_777_344, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(i.into()))
	}
	/// Storage: Cert CertsRemovableOn (r:1 w:0)
	/// Proof Skipped: Cert CertsRemovableOn (max_values: None, max_size: None, mode: Measured)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `181`
		//  Estimated: `3646`
		// Minimum execution time: 3_994_000 picoseconds.
		Weight::from_parts(4_240_000, 0)
			.saturating_add(Weight::from_parts(0, 3646))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: Cert CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Cert CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	fn do_remove_cert_noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `279`
		//  Estimated: `3744`
		// Minimum execution time: 5_177_000 picoseconds.
		Weight::from_parts(5_393_000, 0)
			.saturating_add(Weight::from_parts(0, 3744))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Cert CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Cert CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	/// Storage: Cert StorageIdtyCertMeta (r:2 w:2)
	/// Proof Skipped: Cert StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1 w:0)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	fn do_remove_cert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `701`
		//  Estimated: `6641`
		// Minimum execution time: 23_029_000 picoseconds.
		Weight::from_parts(23_456_000, 0)
			.saturating_add(Weight::from_parts(0, 6641))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
