// Copyright 2021-2022 Axiom-Team
//
// This file is part of Duniter-v2S.
//
// Duniter-v2S is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// Duniter-v2S is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Duniter-v2S. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_certification`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-22, STEPS: `2`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `squirrel`, CPU: `Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/duniter
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=2
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./file_header.txt
// --output=./runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_certification`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_certification::WeightInfo for WeightInfo<T> {
	/// Storage: Identity IdentityIndexOf (r:1 w:0)
	/// Proof Skipped: Identity IdentityIndexOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Certification StorageIdtyCertMeta (r:2 w:2)
	/// Proof Skipped: Certification StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Identity Identities (r:2 w:0)
	/// Proof Skipped: Identity Identities (max_values: None, max_size: None, mode: Measured)
	/// Storage: Certification CertsRemovableOn (r:1 w:1)
	/// Proof Skipped: Certification CertsRemovableOn (max_values: None, max_size: None, mode: Measured)
	/// Storage: Certification CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Certification CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	fn add_cert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `923`
		//  Estimated: `6863`
		// Minimum execution time: 65_778_000 picoseconds.
		Weight::from_parts(72_978_000, 0)
			.saturating_add(Weight::from_parts(0, 6863))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Identity IdentityIndexOf (r:1 w:0)
	/// Proof Skipped: Identity IdentityIndexOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Certification StorageIdtyCertMeta (r:1 w:1)
	/// Proof Skipped: Certification StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Identity Identities (r:2 w:0)
	/// Proof Skipped: Identity Identities (max_values: None, max_size: None, mode: Measured)
	/// Storage: Certification CertsRemovableOn (r:1 w:1)
	/// Proof Skipped: Certification CertsRemovableOn (max_values: None, max_size: None, mode: Measured)
	/// Storage: Certification CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Certification CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	fn renew_cert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `947`
		//  Estimated: `6887`
		// Minimum execution time: 61_109_000 picoseconds.
		Weight::from_parts(64_931_000, 0)
			.saturating_add(Weight::from_parts(0, 6887))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Certification CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Certification CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	/// Storage: Certification StorageIdtyCertMeta (r:2 w:2)
	/// Proof Skipped: Certification StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	fn del_cert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `444`
		//  Estimated: `6384`
		// Minimum execution time: 35_139_000 picoseconds.
		Weight::from_parts(37_463_000, 0)
			.saturating_add(Weight::from_parts(0, 6384))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Certification CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Certification CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	/// Storage: Certification StorageIdtyCertMeta (r:1000 w:1000)
	/// Proof Skipped: Certification StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1 w:0)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[2, 1000]`.
	fn remove_all_certs_received_by(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `588 + i * (35 ±0)`
		//  Estimated: `4054 + i * (2511 ±0)`
		// Minimum execution time: 44_709_000 picoseconds.
		Weight::from_parts(15_690_704, 0)
			.saturating_add(Weight::from_parts(0, 4054))
			// Standard Error: 20_451
			.saturating_add(Weight::from_parts(15_749_397, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(i.into()))
	}
	/// Storage: Certification CertsRemovableOn (r:1 w:0)
	/// Proof Skipped: Certification CertsRemovableOn (max_values: None, max_size: None, mode: Measured)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `139`
		//  Estimated: `3604`
		// Minimum execution time: 4_352_000 picoseconds.
		Weight::from_parts(7_580_000, 0)
			.saturating_add(Weight::from_parts(0, 3604))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: Certification CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Certification CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	fn do_remove_cert_noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237`
		//  Estimated: `3702`
		// Minimum execution time: 7_868_000 picoseconds.
		Weight::from_parts(11_220_000, 0)
			.saturating_add(Weight::from_parts(0, 3702))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Certification CertsByReceiver (r:1 w:1)
	/// Proof Skipped: Certification CertsByReceiver (max_values: None, max_size: None, mode: Measured)
	/// Storage: Certification StorageIdtyCertMeta (r:2 w:2)
	/// Proof Skipped: Certification StorageIdtyCertMeta (max_values: None, max_size: None, mode: Measured)
	/// Storage: Parameters ParametersStorage (r:1 w:0)
	/// Proof Skipped: Parameters ParametersStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Membership (r:1 w:0)
	/// Proof Skipped: Membership Membership (max_values: None, max_size: None, mode: Measured)
	fn do_remove_cert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `660`
		//  Estimated: `6600`
		// Minimum execution time: 33_665_000 picoseconds.
		Weight::from_parts(38_208_000, 0)
			.saturating_add(Weight::from_parts(0, 6600))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
